1. Square and Sort a Sorted Array in O(n)
python
Copy
Edit
def sorted_squares(arr):
    n = len(arr)
    result = [0] * n
    left, right = 0, n - 1
    index = n - 1

    while left <= right:
        left_sq = arr[left] ** 2
        right_sq = arr[right] ** 2

        if left_sq > right_sq:
            result[index] = left_sq
            left += 1
        else:
            result[index] = right_sq
            right -= 1

        index -= 1

    return result

arr = [-12, -8, -7, -5, 2, 4, 5, 11, 15]
print(sorted_squares(arr))
2. Immutable Class in Java
java
Copy
Edit
import java.util.*;

final class Address {
    private final String city;
    private final String state;

    public Address(String city, String state) {
        this.city = city;
        this.state = state;
    }

    public String getCity() {
        return city;
    }

    public String getState() {
        return state;
    }
}

final class Employee {
    private final String name;
    private final String id;
    private final Date dateOfJoining;
    private final List<Address> addresses;

    public Employee(String name, String id, Date dateOfJoining, List<Address> addresses) {
        this.name = name;
        this.id = id;
        this.dateOfJoining = new Date(dateOfJoining.getTime());
        List<Address> tempAddresses = new ArrayList<>();
        for (Address address : addresses) {
            tempAddresses.add(new Address(address.getCity(), address.getState()));
        }
        this.addresses = Collections.unmodifiableList(tempAddresses);
    }

    public String getName() {
        return name;
    }

    public String getId() {
        return id;
    }

    public Date getDateOfJoining() {
        return new Date(dateOfJoining.getTime());
    }

    public List<Address> getAddresses() {
        return addresses;
    }
}
3. Sort an Array of Red, Green, and Blue Balls
python
Copy
Edit
def sort_rgb(arr):
    low, mid, high = 0, 0, len(arr) - 1

    while mid <= high:
        if arr[mid] == 'B':
            arr[low], arr[mid] = arr[mid], arr[low]
            low += 1
            mid += 1
        elif arr[mid] == 'G':
            mid += 1
        else:
            arr[mid], arr[high] = arr[high], arr[mid]
            high -= 1

    return arr

arr = ['R', 'G', 'B', 'G', 'G', 'R', 'B', 'B', 'G']
print(sort_rgb(arr))
4. Minimum Platforms Required for Trains
python
Copy
Edit
def min_platforms(arrival, departure):
    events = []
    
    for arr in arrival:
        events.append((arr, 'A'))
    for dep in departure:
        events.append((dep, 'D'))
    
    events.sort()

    max_platforms, platforms = 0, 0

    for _, event in events:
        if event == 'A':
            platforms += 1
        else:
            platforms -= 1
        max_platforms = max(max_platforms, platforms)

    return max_platforms

arrival = ["09:00", "09:40", "09:50", "11:00", "15:00", "18:00"]
departure = ["09:10", "12:00", "11:20", "11:30", "19:00", "20:00"]
print(min_platforms(arrival, departure))
5. Sort HashMap by Value in Java
java
Copy
Edit
import java.util.*;

public class SortMapByValue {
    public static void main(String[] args) {
        Map<Integer, String> map = new HashMap<>();
        map.put(101, "John Doe");
        map.put(102, "Jane Smith");
        map.put(103, "Peter Johnson");

        List<Map.Entry<Integer, String>> list = new ArrayList<>(map.entrySet());

        list.sort(Comparator.comparing(Map.Entry::getValue));

        LinkedHashMap<Integer, String> sortedMap = new LinkedHashMap<>();
        for (Map.Entry<Integer, String> entry : list) {
            sortedMap.put(entry.getKey(), entry.getValue());
        }

        System.out.println(sortedMap);
    }
}
